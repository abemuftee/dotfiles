#+TITLE: Doom Emacs Configuration
#+AUTHOR: Ibrahim Muftee

* Table of Contents :toc:
- [[#rudimentary-configuration][Rudimentary Configuration]]
  - [[#max-lisp-eval-depth-fix][Max Lisp Eval Depth fix]]
  - [[#basic-information][Basic Information]]
  - [[#visuals][Visuals]]
- [[#packages][Packages]]
  - [[#org-mode][Org Mode]]

* Rudimentary Configuration

** Max Lisp Eval Depth fix

I can't SPC . when I install Doom Emacs fresh, so this fixes this issue.

#+begin_src emacs-lisp
(setq max-lisp-eval-depth 10000)
#+end_src

** Basic Information

Doom Emacs does useful things with these simple user variables.

#+begin_src emacs-lisp
(setq user-full-name "Ibrahim Muftee"
      user-mail-address "ibrahim@ibrahimmuftee.net")
#+end_src

** Visuals

*** Fonts

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka" :size 14 :weight 'regular)
      doom-variable-pitch-font (font-spec :family "Roboto" :size 14))
#+end_src

*** Theme

I usually use Nord themes for everything, but I think I prefer doom-one/doom-vibrant for Emacs at least. I'll be sticking with doom-one for now.

#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
#+end_src

*** Line Numbers

I like relative line numbers.

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

* Packages

** Org Mode

*** Better Font Faces

These set which kinds of fonts are used for different elements in Org mode.

#+begin_src emacs-lisp

(defun ib/org-font-setup ()
  ;; Replace list hyphen with dot
  ;; (font-lock-add-keywords 'org-mode
  ;;                         '(("^ *\\([-]\\) "
  ;;                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Roboto" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
  (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
  (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

*** Basic Configuration

These are some basic configuration options I used in my GNU Emacs config.

#+begin_src emacs-lisp

  (defun ib/org-mode-setup ()
    (org-indent-mode)
    ;; (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

  ;; (add-hook 'org-mode-hook 'variable-pitch-mode)

  (use-package org
    :hook (org-mode . ib/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-directory "~/Documents/org/")
    (setq org-agenda-files
          '("~/Documents/org/Tasks.org"
            "~/Documents/org/Calendar.org"
            "~/Documents/org/Habits.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)"))))
#+end_src

These are some more powerful features of org mode.

#+begin_src emacs-lisp
    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("@school" . ?S)
            ("homework" . ?h)
            ("study" . ?s)
            ("quiz" . ?q)
            ("test" . ?t)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (tags-todo "homework"
                    ((org-agenda-overriding-header "Homework Assignments")))
              (tags-todo "study"
                    ((org-agenda-overriding-header "Studying")))
              (tags-todo "quiz"
                    ((org-agenda-overriding-header "Quizzes")))
              (tags-todo "test"
                    ((org-agenda-overriding-header "Tests")))
              (tags-todo "@home"
                    ((org-agenda-overriding-header "Home Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("H" "Home Tasks" tags-todo "@home-meds")

            ("W" "Work Tasks" tags-todo "@work")

            ("S" "School Tasks" tags-todo "@school")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (defun ib/read-file-as-string (path)
      (with-temp-buffer
        (insert-file-contents path)
        (buffer-string)))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Documents/org/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
            ("ta" "Assignment" entry (file+olp "~/Documents/org/Tasks.org" "Inbox")
             "* TODO %?\nDEADLINE: %^t\n" :empty-lines 1)
            ("tq" "Quiz/Test" entry (file+olp "~/Documents/org/Tasks.org" "Inbox")
             "* TODO %?\nSCHEDULED: %^t\n" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Documents/org/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(ib/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Documents/org/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Documents/org/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/Documents/org/Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))
#+end_src


*** Nicer Heading Bullets

#+begin_src emacs-lisp
(use-package! org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

