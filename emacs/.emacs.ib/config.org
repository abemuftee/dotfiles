#+TITLE: Emacs Configuration
#+AUTHOR: Ibrahim Muftee
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.ib/config.el :mkdirp yes

* Package System Setup

#+begin_src emacs-lisp

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

* Keep Folders Clean

#+begin_src emacs-lisp

;; NOTE: If you want to move everything out of the ~/.emacs.d folder
;; reliably, set `user-emacs-directory` before loading no-littering!
;(setq user-emacs-directory "~/.cache/emacs")

(use-package no-littering)

;; no-littering doesn't set this by default so we must place
;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* Basic UI Configuration

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		   mu4e-main-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

#+begin_src emacs-lisp

(defun ib/set-font-faces ()
  (message "Setting faces!")
  (set-face-attribute 'default nil :font "Iosevka" :height 120 :weight 'regular)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Iosevka" :height 120 :weight 'regular)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Roboto" :height 120 :weight 'regular))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
                (with-selected-frame frame
                  (ib/set-font-faces))))
    (ib/set-font-faces))

#+end_src

* Keybinding Configuration

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :config
    (general-evil-setup)

    (general-create-definer ib/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (ib/leader-keys
      "t"   '(:ignore t :which-key "toggles")
      "tt"   '(toggle-truncate-lines :which-key "Toggle truncate lines")
      ;; Window splits
      "wc"   '(evil-window-delete :which-key "Close window")
      "wn"   '(evil-window-new :which-key "New window")
      "ws"   '(evil-window-split :which-key "Horizontal split window")
      "wv"   '(evil-window-vsplit :which-key "Vertical split window")
      ;; Window motions
      "wh"   '(evil-window-left :which-key "Window left")
      "wj"   '(evil-window-down :which-key "Window down")
      "wk"   '(evil-window-up :which-key "Window up")
      "wl"   '(evil-window-right :which-key "Window right")
      "ww"   '(evil-window-next :which-key "Goto next window")

      "."    '(counsel-find-file :which-key "find file")
      "eb"   '(eval-buffer :which-key "eval elisp in buffer")
      "hrr"  '((lambda () (interactive) (load-file "~/.emacs.ib/init.el")) :which-key "reload emacs config")
      "cc"   '(compile :which-key "compile")
      "cC"   '(recompile :which-key "recompile")
      "fde"  '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.ib/config.org")))
      "RET"  '(counsel-bookmark :which-key "bookmarks")
      ;; Ibuffer
      "bb"   '(ibuffer :which-key "Ibuffer")
      "bk"   '(kill-current-buffer :which-key "Kill current buffer")
      "bn"   '(next-buffer :which-key "Next buffer")
      "bp"   '(previous-buffer :which-key "Previous buffer")
      "bB"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
      "bK"   '(kill-buffer :which-key "Kill buffer")))

  (use-package undo-fu) ;; For evil redo functionality

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ;; change all prompts to y or n
  (fset 'yes-or-no-p 'y-or-n-p)

#+end_src

* UI Configuration

** Color Theme

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-nord t))

#+end_src

** Better Modeline

#+begin_src emacs-lisp

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1))

(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                                 '(coding-category-undecided coding-category-utf-8))
                           (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                t)))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)

#+end_src

** Which Key

#+begin_src emacs-lisp

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel

#+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))

(use-package smex)

#+end_src

** Helpful Help Commands

#+begin_src emacs-lisp

(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

* Mu4e

#+begin_src emacs-lisp

  (use-package mu4e
    :ensure nil
    :config

    (ib/leader-keys
      "om" '(mu4e :which-key "open mu4e"))

    (setq mu4e-change-filenames-when-moving t) ;; This is set to 't' to avoid mail syncing issues when using mbsync

    (setq mu4e-update-interval (* 10 60)) ;; Refresh mail using isync every 10 minutes
    (setq mu4e-get-mail-command "mbsync -a")
    ;; (setq mu4e-maildir "~/.mail")
    (setq user-mail-address "ibrahim@ibrahimmuftee.net")

    (setq mu4e-contexts
          (list
           ;; Personal account
           (make-mu4e-context
            :name "Personal"
            :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/Personal" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "ibrahim@ibrahimmuftee.net")
                    (user-full-name    . "Ibrahim Muftee")
                    (smtpmail-smtp-server . "mail.ibrahimmuftee.net")
                    (smtpmail-smtp-service . 587)
                    (mu4e-drafts-folder  . "/Personal/Drafts")
                    (mu4e-sent-folder  . "/Personal/Sent")
                    (mu4e-refile-folder  . "/Personal/Archive")
                    (mu4e-trash-folder  . "/Personal/Trash")))))

    (setq mu4e-maildir-shortcuts
        '(("/Personal/Inbox"             . ?i)
          ("/Personal/Sent"              . ?s)
          ("/Personal/Trash"             . ?t)
          ("/Personal/Drafts"            . ?d)
          ("/Personal/Archive"           . ?a))))

  (setq message-send-mail-function 'smtpmail-send-it) ;; Configure the function to use for sending mail

  (setq mu4e-compose-format-flowed t) ;; Make sure plain text mails flow correctly for recipients

  (setq mu4e-compose-signature ;; My email signature
   (concat
    "Ibrahim Muftee\n"
    "http://ibrahimmuftee.net"))

  (add-hook 'message-send-hook 'mml-secure-message-sign-pgpmime) ;; Automatically sign every email

  (setq mml-secure-openpgp-signers '("0xA31B5819437230ED"));; Use a specific key for signing by referencing its thumbprint.

  ;; Add option to open email in browser
  ;; (add-to-list 'mu4e-view-actions
  ;;  '("View in Browser" . mu4e-action-view-in-browser) t)

  (setq browse-url-browser-function 'browse-url-generic)
  (setq browse-url-generic-program "google-chrome-stable")

#+end_src

* Org Mode

** Better Font Faces

#+begin_src emacs-lisp

(defun ib/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Roboto" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
  (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
  (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

** Basic Config

#+begin_src emacs-lisp

  (defun ib/org-mode-setup ()
    (org-indent-mode)
    ;; (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil)
    (ib/leader-keys
      "oa" '(org-agenda :which-key "open org agenda")))

  (add-hook 'org-mode-hook 'variable-pitch-mode)

  (use-package org
    :hook (org-mode . ib/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-directory "~/dox/org/")
    (setq org-agenda-files
          '("~/dox/org/Tasks.org"
            "~/dox/org/Birthdays.org"
            "~/dox/org/Habits.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("errand" . ?E)
            ("home" . ?H)
            ("work" . ?W)
            ("school" . ?S)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("H" "Home Tasks" tags-todo "+home")

            ("W" "Work Tasks" tags-todo "+work")

            ("S" "School Tasks" tags-todo "+school")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (defun ib/read-file-as-string (path)
      (with-temp-buffer
        (insert-file-contents path)
        (buffer-string)))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/dox/org/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/dox/org/Jounral.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(ib/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/dox/org/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/dox/org/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/dox/org/Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (ib/leader-keys
      "oc" '(org-capture :which-key "open org capture"))


    (ib/org-font-setup))

#+end_src

*** Evil Org

#+begin_src emacs-lisp

(use-package evil-org
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
  (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading)))

#+end_src

*** Hide Properties Drawers

#+begin_src emacs-lisp

  ;; Completely hide the :PROPERTIES: drawer
  (require 'org)

  (defun org-cycle-hide-drawers (state)
    "Re-hide all drawers after a visibility state change."
    (when (and (derived-mode-p 'org-mode)
               (not (memq state '(overview folded contents))))
      (save-excursion
        (let* ((globalp (memq state '(contents all)))
               (beg (if globalp
                        (point-min)
                      (point)))
               (end (if globalp
                        (point-max)
                      (if (eq state 'children)
                          (save-excursion
                            (outline-next-heading)
                            (point))
                        (org-end-of-subtree t)))))
          (goto-char beg)
          (while (re-search-forward org-drawer-regexp end t)
            (save-excursion
              (beginning-of-line 1)
              (when (looking-at org-drawer-regexp)
                (let* ((start (1- (match-beginning 0)))
                       (limit
                        (save-excursion
                          (outline-next-heading)
                          (point)))
                       (msg (format
                             (concat
                              "org-cycle-hide-drawers:  "
                              "`:END:`"
                              " line missing at position %s")
                             (1+ start))))
                  (if (re-search-forward "^[ \t]*:END:" limit t)
                      (outline-flag-region start (point-at-eol) t)
                    (user-error msg))))))))))

  (setq org-cycle-hide-drawers t)

#+end_src

*** Nicer Heading Bullets

#+begin_src emacs-lisp

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

#+begin_src emacs-lisp

(defun ib/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . ib/org-mode-visual-fill))

#+end_src

** Configure Babel Languages

#+begin_src emacs-lisp

(with-eval-after-load 'org
  (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
      (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Structure Templates

#+begin_src emacs-lisp

(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Auto-tangle Configuration Files

#+begin_src emacs-lisp

;; Automatically tangle our Emacs.org config file when we save it
(defun ib/org-babel-tangle-config ()
  (when (string-equal (file-name-directory (buffer-file-name))
                      (expand-file-name user-emacs-directory))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ib/org-babel-tangle-config)))

#+end_src

** Table of Contents

#+begin_src emacs-lisp

(use-package toc-org
  :config
  (if (require 'toc-org nil t)
      (progn
	(add-hook 'org-mode-hook 'toc-org-mode))))

#+end_src

** Auto-revert Mode

#+begin_src emacs-lisp

  (setq global-auto-revert-mode t)

#+end_src

** Org Roam

#+begin_src emacs-lisp

  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/dox/org-roam")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("l" "programming language" plain
        "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("b" "book notes" plain
        (file "~/dox/org-roam/Templates/BookNoteTemplate.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("p" "project" plain
        "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
        :unnarrowed t)
       )
     )
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup))

  #+end_src

* Development

** Languages

#+begin_src emacs-lisp

  (use-package lsp-java
    :config
    (add-hook 'java-mode-hook #'lsp))

  (add-hook 'c-mode-hook #'lsp)

#+end_src

** Exporting Languages

*** Markdown

#+begin_src emacs-lisp
(add-to-list 'org-export-backends 'md)
#+end_src

** Language Servers

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/code")
      (setq projectile-project-search-path '("~/code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-fuction #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

** Commenting

#+begin_src emacs-lisp

(use-package evil-commentary
  :config (evil-commentary-mode))

#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* File Manager
** Dired

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file)
    (setq vc-follow-symlinks t))

#+end_src

* Terminals
** vterm-mode

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    ;; (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
    ;;(setq vterm-shell "zsh")
    (setq vterm-use-vterm-prompt nil
           term-prompt-regexp "[#$] ")
    (setq vterm-max-scrollback 10000))

#+end_src

** Eshell

#+begin_src emacs-lisp

  (defun ib/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))


  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . ib/configure-eshell)
    :config
    (eshell-git-prompt-use-theme 'powerline))


#+end_src
